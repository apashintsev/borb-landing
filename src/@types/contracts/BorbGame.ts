/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface BorbGameInterface extends utils.Interface {
  functions: {
    "REWARD_PERCENT_MAX()": FunctionFragment;
    "REWARD_PERCENT_MIN()": FunctionFragment;
    "addAsset(address)": FunctionFragment;
    "bets(uint256)": FunctionFragment;
    "calculator()": FunctionFragment;
    "claim(uint256,uint80)": FunctionFragment;
    "currencies(uint256)": FunctionFragment;
    "getAllowedAssets()": FunctionFragment;
    "getAllowedTimeframes()": FunctionFragment;
    "getAssetAddress(string)": FunctionFragment;
    "getClosePrice(uint256,uint256)": FunctionFragment;
    "getClosePriceByRoundId(uint256,uint80)": FunctionFragment;
    "getCloseRoundId(uint256)": FunctionFragment;
    "getPriceFeed(uint8)": FunctionFragment;
    "getReferer()": FunctionFragment;
    "getReward(uint8,uint8,uint32,uint256)": FunctionFragment;
    "makeBet(uint256,address,uint32,uint8,uint8,uint8)": FunctionFragment;
    "maxBetAmount()": FunctionFragment;
    "minBetAmount()": FunctionFragment;
    "owner()": FunctionFragment;
    "pool()": FunctionFragment;
    "priceFeeds(uint8)": FunctionFragment;
    "referals(address)": FunctionFragment;
    "rewardPercent(uint8,uint8,uint32)": FunctionFragment;
    "setMinAndMaxBetAmount(uint256,uint256)": FunctionFragment;
    "setOracle(address,uint8)": FunctionFragment;
    "updateRewardPercent(uint8,uint8,uint32,uint256)": FunctionFragment;
    "users(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "REWARD_PERCENT_MAX"
      | "REWARD_PERCENT_MIN"
      | "addAsset"
      | "bets"
      | "calculator"
      | "claim"
      | "currencies"
      | "getAllowedAssets"
      | "getAllowedTimeframes"
      | "getAssetAddress"
      | "getClosePrice"
      | "getClosePriceByRoundId"
      | "getCloseRoundId"
      | "getPriceFeed"
      | "getReferer"
      | "getReward"
      | "makeBet"
      | "maxBetAmount"
      | "minBetAmount"
      | "owner"
      | "pool"
      | "priceFeeds"
      | "referals"
      | "rewardPercent"
      | "setMinAndMaxBetAmount"
      | "setOracle"
      | "updateRewardPercent"
      | "users"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "REWARD_PERCENT_MAX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REWARD_PERCENT_MIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAsset",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bets",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "currencies",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllowedAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllowedTimeframes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getClosePrice",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getClosePriceByRoundId",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCloseRoundId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceFeed",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReward",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "makeBet",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "maxBetAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minBetAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceFeeds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "referals",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPercent",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinAndMaxBetAmount",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracle",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewardPercent",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "users",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "REWARD_PERCENT_MAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REWARD_PERCENT_MIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addAsset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "calculator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "currencies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllowedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllowedTimeframes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClosePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClosePriceByRoundId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCloseRoundId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReferer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "makeBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxBetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minBetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceFeeds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "referals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinAndMaxBetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateRewardPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;

  events: {
    "BetClaimed(address,uint256,uint256,int256)": EventFragment;
    "NewBetAdded(address,uint256,uint8,uint8,uint32,uint256,uint256,uint8,int256,uint256)": EventFragment;
    "NewUserAdded(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BetClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBetAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewUserAdded"): EventFragment;
}

export interface BetClaimedEventObject {
  user: string;
  timeframe: BigNumber;
  betId: BigNumber;
  closePrice: BigNumber;
}
export type BetClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  BetClaimedEventObject
>;

export type BetClaimedEventFilter = TypedEventFilter<BetClaimedEvent>;

export interface NewBetAddedEventObject {
  user: string;
  betId: BigNumber;
  betType: number;
  currency: number;
  timeframe: number;
  amount: BigNumber;
  potentialReward: BigNumber;
  assetId: number;
  lockPrice: BigNumber;
  lockedAt: BigNumber;
}
export type NewBetAddedEvent = TypedEvent<
  [
    string,
    BigNumber,
    number,
    number,
    number,
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber
  ],
  NewBetAddedEventObject
>;

export type NewBetAddedEventFilter = TypedEventFilter<NewBetAddedEvent>;

export interface NewUserAddedEventObject {
  user: string;
  ref: string;
}
export type NewUserAddedEvent = TypedEvent<
  [string, string],
  NewUserAddedEventObject
>;

export type NewUserAddedEventFilter = TypedEventFilter<NewUserAddedEvent>;

export interface BorbGame extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BorbGameInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    REWARD_PERCENT_MAX(overrides?: CallOverrides): Promise<[BigNumber]>;

    REWARD_PERCENT_MIN(overrides?: CallOverrides): Promise<[BigNumber]>;

    addAsset(
      _stablecoinAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        number,
        number,
        number,
        number,
        boolean
      ] & {
        lockPrice: BigNumber;
        lockTimestamp: BigNumber;
        amount: BigNumber;
        potentialReward: BigNumber;
        user: string;
        roundId: BigNumber;
        timeframe: number;
        assetId: number;
        betType: number;
        currency: number;
        claimed: boolean;
      }
    >;

    calculator(overrides?: CallOverrides): Promise<[string]>;

    claim(
      _betId: PromiseOrValue<BigNumberish>,
      _knownRoundId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currencies(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getAllowedAssets(overrides?: CallOverrides): Promise<[string[]]>;

    getAllowedTimeframes(overrides?: CallOverrides): Promise<[number[]]>;

    getAssetAddress(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getClosePrice(
      _betId: PromiseOrValue<BigNumberish>,
      _latestRoundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getClosePriceByRoundId(
      _betId: PromiseOrValue<BigNumberish>,
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCloseRoundId(
      _betId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPriceFeed(
      _currency: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getReferer(overrides?: CallOverrides): Promise<[string]>;

    getReward(
      _assetId: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<BigNumberish>,
      _timeframe: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reward: BigNumber }>;

    makeBet(
      _amount: PromiseOrValue<BigNumberish>,
      _ref: PromiseOrValue<string>,
      _timeframe: PromiseOrValue<BigNumberish>,
      _assetId: PromiseOrValue<BigNumberish>,
      _betType: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxBetAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    minBetAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pool(overrides?: CallOverrides): Promise<[string]>;

    priceFeeds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    referals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rewardPercent(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setMinAndMaxBetAmount(
      _newMin: PromiseOrValue<BigNumberish>,
      _newMax: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOracle(
      _oracle: PromiseOrValue<string>,
      _currency: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateRewardPercent(
      _assetId: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<BigNumberish>,
      _timeframe: PromiseOrValue<BigNumberish>,
      _newPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  REWARD_PERCENT_MAX(overrides?: CallOverrides): Promise<BigNumber>;

  REWARD_PERCENT_MIN(overrides?: CallOverrides): Promise<BigNumber>;

  addAsset(
    _stablecoinAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bets(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      number,
      number,
      number,
      number,
      boolean
    ] & {
      lockPrice: BigNumber;
      lockTimestamp: BigNumber;
      amount: BigNumber;
      potentialReward: BigNumber;
      user: string;
      roundId: BigNumber;
      timeframe: number;
      assetId: number;
      betType: number;
      currency: number;
      claimed: boolean;
    }
  >;

  calculator(overrides?: CallOverrides): Promise<string>;

  claim(
    _betId: PromiseOrValue<BigNumberish>,
    _knownRoundId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currencies(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getAllowedAssets(overrides?: CallOverrides): Promise<string[]>;

  getAllowedTimeframes(overrides?: CallOverrides): Promise<number[]>;

  getAssetAddress(
    _name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getClosePrice(
    _betId: PromiseOrValue<BigNumberish>,
    _latestRoundId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getClosePriceByRoundId(
    _betId: PromiseOrValue<BigNumberish>,
    _roundId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCloseRoundId(
    _betId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPriceFeed(
    _currency: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getReferer(overrides?: CallOverrides): Promise<string>;

  getReward(
    _assetId: PromiseOrValue<BigNumberish>,
    _currency: PromiseOrValue<BigNumberish>,
    _timeframe: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  makeBet(
    _amount: PromiseOrValue<BigNumberish>,
    _ref: PromiseOrValue<string>,
    _timeframe: PromiseOrValue<BigNumberish>,
    _assetId: PromiseOrValue<BigNumberish>,
    _betType: PromiseOrValue<BigNumberish>,
    _currency: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxBetAmount(overrides?: CallOverrides): Promise<BigNumber>;

  minBetAmount(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pool(overrides?: CallOverrides): Promise<string>;

  priceFeeds(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  referals(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  rewardPercent(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setMinAndMaxBetAmount(
    _newMin: PromiseOrValue<BigNumberish>,
    _newMax: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOracle(
    _oracle: PromiseOrValue<string>,
    _currency: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateRewardPercent(
    _assetId: PromiseOrValue<BigNumberish>,
    _currency: PromiseOrValue<BigNumberish>,
    _timeframe: PromiseOrValue<BigNumberish>,
    _newPercent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  users(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    REWARD_PERCENT_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    REWARD_PERCENT_MIN(overrides?: CallOverrides): Promise<BigNumber>;

    addAsset(
      _stablecoinAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    bets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        number,
        number,
        number,
        number,
        boolean
      ] & {
        lockPrice: BigNumber;
        lockTimestamp: BigNumber;
        amount: BigNumber;
        potentialReward: BigNumber;
        user: string;
        roundId: BigNumber;
        timeframe: number;
        assetId: number;
        betType: number;
        currency: number;
        claimed: boolean;
      }
    >;

    calculator(overrides?: CallOverrides): Promise<string>;

    claim(
      _betId: PromiseOrValue<BigNumberish>,
      _knownRoundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    currencies(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getAllowedAssets(overrides?: CallOverrides): Promise<string[]>;

    getAllowedTimeframes(overrides?: CallOverrides): Promise<number[]>;

    getAssetAddress(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getClosePrice(
      _betId: PromiseOrValue<BigNumberish>,
      _latestRoundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClosePriceByRoundId(
      _betId: PromiseOrValue<BigNumberish>,
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCloseRoundId(
      _betId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceFeed(
      _currency: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getReferer(overrides?: CallOverrides): Promise<string>;

    getReward(
      _assetId: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<BigNumberish>,
      _timeframe: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makeBet(
      _amount: PromiseOrValue<BigNumberish>,
      _ref: PromiseOrValue<string>,
      _timeframe: PromiseOrValue<BigNumberish>,
      _assetId: PromiseOrValue<BigNumberish>,
      _betType: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    maxBetAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minBetAmount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pool(overrides?: CallOverrides): Promise<string>;

    priceFeeds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    referals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    rewardPercent(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMinAndMaxBetAmount(
      _newMin: PromiseOrValue<BigNumberish>,
      _newMax: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracle(
      _oracle: PromiseOrValue<string>,
      _currency: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRewardPercent(
      _assetId: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<BigNumberish>,
      _timeframe: PromiseOrValue<BigNumberish>,
      _newPercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "BetClaimed(address,uint256,uint256,int256)"(
      user?: PromiseOrValue<string> | null,
      timeframe?: PromiseOrValue<BigNumberish> | null,
      betId?: PromiseOrValue<BigNumberish> | null,
      closePrice?: null
    ): BetClaimedEventFilter;
    BetClaimed(
      user?: PromiseOrValue<string> | null,
      timeframe?: PromiseOrValue<BigNumberish> | null,
      betId?: PromiseOrValue<BigNumberish> | null,
      closePrice?: null
    ): BetClaimedEventFilter;

    "NewBetAdded(address,uint256,uint8,uint8,uint32,uint256,uint256,uint8,int256,uint256)"(
      user?: PromiseOrValue<string> | null,
      betId?: null,
      betType?: null,
      currency?: null,
      timeframe?: null,
      amount?: null,
      potentialReward?: null,
      assetId?: null,
      lockPrice?: null,
      lockedAt?: null
    ): NewBetAddedEventFilter;
    NewBetAdded(
      user?: PromiseOrValue<string> | null,
      betId?: null,
      betType?: null,
      currency?: null,
      timeframe?: null,
      amount?: null,
      potentialReward?: null,
      assetId?: null,
      lockPrice?: null,
      lockedAt?: null
    ): NewBetAddedEventFilter;

    "NewUserAdded(address,address)"(
      user?: PromiseOrValue<string> | null,
      ref?: null
    ): NewUserAddedEventFilter;
    NewUserAdded(
      user?: PromiseOrValue<string> | null,
      ref?: null
    ): NewUserAddedEventFilter;
  };

  estimateGas: {
    REWARD_PERCENT_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    REWARD_PERCENT_MIN(overrides?: CallOverrides): Promise<BigNumber>;

    addAsset(
      _stablecoinAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculator(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      _betId: PromiseOrValue<BigNumberish>,
      _knownRoundId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currencies(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllowedAssets(overrides?: CallOverrides): Promise<BigNumber>;

    getAllowedTimeframes(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetAddress(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClosePrice(
      _betId: PromiseOrValue<BigNumberish>,
      _latestRoundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClosePriceByRoundId(
      _betId: PromiseOrValue<BigNumberish>,
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCloseRoundId(
      _betId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceFeed(
      _currency: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReferer(overrides?: CallOverrides): Promise<BigNumber>;

    getReward(
      _assetId: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<BigNumberish>,
      _timeframe: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makeBet(
      _amount: PromiseOrValue<BigNumberish>,
      _ref: PromiseOrValue<string>,
      _timeframe: PromiseOrValue<BigNumberish>,
      _assetId: PromiseOrValue<BigNumberish>,
      _betType: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxBetAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minBetAmount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeeds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardPercent(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMinAndMaxBetAmount(
      _newMin: PromiseOrValue<BigNumberish>,
      _newMax: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOracle(
      _oracle: PromiseOrValue<string>,
      _currency: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateRewardPercent(
      _assetId: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<BigNumberish>,
      _timeframe: PromiseOrValue<BigNumberish>,
      _newPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    REWARD_PERCENT_MAX(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REWARD_PERCENT_MIN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAsset(
      _stablecoinAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      _betId: PromiseOrValue<BigNumberish>,
      _knownRoundId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currencies(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllowedAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllowedTimeframes(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssetAddress(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClosePrice(
      _betId: PromiseOrValue<BigNumberish>,
      _latestRoundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClosePriceByRoundId(
      _betId: PromiseOrValue<BigNumberish>,
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCloseRoundId(
      _betId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceFeed(
      _currency: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReferer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReward(
      _assetId: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<BigNumberish>,
      _timeframe: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makeBet(
      _amount: PromiseOrValue<BigNumberish>,
      _ref: PromiseOrValue<string>,
      _timeframe: PromiseOrValue<BigNumberish>,
      _assetId: PromiseOrValue<BigNumberish>,
      _betType: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxBetAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minBetAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceFeeds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardPercent(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMinAndMaxBetAmount(
      _newMin: PromiseOrValue<BigNumberish>,
      _newMax: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOracle(
      _oracle: PromiseOrValue<string>,
      _currency: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateRewardPercent(
      _assetId: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<BigNumberish>,
      _timeframe: PromiseOrValue<BigNumberish>,
      _newPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
