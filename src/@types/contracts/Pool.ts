/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface PoolInterface extends utils.Interface {
  functions: {
    "MIN_USDT_PRICE()": FunctionFragment;
    "addAsset(address)": FunctionFragment;
    "allowedAssets(uint8)": FunctionFragment;
    "allowedAssetsCount()": FunctionFragment;
    "claimReward(uint8)": FunctionFragment;
    "getAllowedAssets()": FunctionFragment;
    "getAssetAddress(string)": FunctionFragment;
    "getAssetTokenPlusAddress(string)": FunctionFragment;
    "getTokenPlusBuyPrice(uint8)": FunctionFragment;
    "getTokenPlusSellPrice(uint8)": FunctionFragment;
    "house()": FunctionFragment;
    "makeBet(uint256,uint256,address,uint8)": FunctionFragment;
    "makeDeposit(uint8,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "poolBalanceEnough(uint256,uint8)": FunctionFragment;
    "referalBalanceOf(uint8,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferReward(uint256,uint256,uint256,address,address,uint8)": FunctionFragment;
    "unlock(uint256,uint256,uint256,address,address,uint8)": FunctionFragment;
    "userBalanceEnough(address,uint256,uint8)": FunctionFragment;
    "withdraw(uint8,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MIN_USDT_PRICE"
      | "addAsset"
      | "allowedAssets"
      | "allowedAssetsCount"
      | "claimReward"
      | "getAllowedAssets"
      | "getAssetAddress"
      | "getAssetTokenPlusAddress"
      | "getTokenPlusBuyPrice"
      | "getTokenPlusSellPrice"
      | "house"
      | "makeBet"
      | "makeDeposit"
      | "owner"
      | "poolBalanceEnough"
      | "referalBalanceOf"
      | "renounceOwnership"
      | "transferOwnership"
      | "transferReward"
      | "unlock"
      | "userBalanceEnough"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MIN_USDT_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAsset",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedAssets",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedAssetsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllowedAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetTokenPlusAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenPlusBuyPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenPlusSellPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "house", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "makeBet",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "makeDeposit",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolBalanceEnough",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "referalBalanceOf",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferReward",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unlock",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "userBalanceEnough",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "MIN_USDT_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedAssetsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllowedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetTokenPlusAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPlusBuyPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPlusSellPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "house", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "makeBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "makeDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolBalanceEnough",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referalBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userBalanceEnough",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "BuyPriceChanged(uint8,uint256,uint256)": EventFragment;
    "InvestmentAdded(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ReferalRewardEarned(uint256,address,address,uint256)": EventFragment;
    "SellPriceChanged(uint8,uint256,uint256)": EventFragment;
    "Withdrawed(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BuyPriceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InvestmentAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferalRewardEarned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellPriceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawed"): EventFragment;
}

export interface BuyPriceChangedEventObject {
  assetId: number;
  price: BigNumber;
  changedAt: BigNumber;
}
export type BuyPriceChangedEvent = TypedEvent<
  [number, BigNumber, BigNumber],
  BuyPriceChangedEventObject
>;

export type BuyPriceChangedEventFilter = TypedEventFilter<BuyPriceChangedEvent>;

export interface InvestmentAddedEventObject {
  user: string;
  amount: BigNumber;
  investedAt: BigNumber;
}
export type InvestmentAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  InvestmentAddedEventObject
>;

export type InvestmentAddedEventFilter = TypedEventFilter<InvestmentAddedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ReferalRewardEarnedEventObject {
  betId: BigNumber;
  from: string;
  to: string;
  amount: BigNumber;
}
export type ReferalRewardEarnedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  ReferalRewardEarnedEventObject
>;

export type ReferalRewardEarnedEventFilter =
  TypedEventFilter<ReferalRewardEarnedEvent>;

export interface SellPriceChangedEventObject {
  assetId: number;
  price: BigNumber;
  changedAt: BigNumber;
}
export type SellPriceChangedEvent = TypedEvent<
  [number, BigNumber, BigNumber],
  SellPriceChangedEventObject
>;

export type SellPriceChangedEventFilter =
  TypedEventFilter<SellPriceChangedEvent>;

export interface WithdrawedEventObject {
  user: string;
  amount: BigNumber;
  investedAt: BigNumber;
}
export type WithdrawedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  WithdrawedEventObject
>;

export type WithdrawedEventFilter = TypedEventFilter<WithdrawedEvent>;

export interface Pool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MIN_USDT_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    addAsset(
      _stablecoinAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowedAssets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber] & {
        name: string;
        stablecoin: string;
        tokenPlus: string;
        blockedStablecoinCount: BigNumber;
        totalStablecoinInvested: BigNumber;
      }
    >;

    allowedAssetsCount(overrides?: CallOverrides): Promise<[number]>;

    claimReward(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllowedAssets(overrides?: CallOverrides): Promise<[string[]]>;

    getAssetAddress(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAssetTokenPlusAddress(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTokenPlusBuyPrice(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenPlusSellPrice(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    house(overrides?: CallOverrides): Promise<[string]>;

    makeBet(
      _amount: PromiseOrValue<BigNumberish>,
      _potentialReward: PromiseOrValue<BigNumberish>,
      _from: PromiseOrValue<string>,
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    makeDeposit(
      _assetId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    poolBalanceEnough(
      _amount: PromiseOrValue<BigNumberish>,
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    referalBalanceOf(
      _assetId: PromiseOrValue<BigNumberish>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferReward(
      _betId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _houseFee: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _ref: PromiseOrValue<string>,
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unlock(
      _betId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _houseFee: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _ref: PromiseOrValue<string>,
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userBalanceEnough(
      _player: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdraw(
      _assetId: PromiseOrValue<BigNumberish>,
      _tokenPlusAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MIN_USDT_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  addAsset(
    _stablecoinAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowedAssets(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, BigNumber] & {
      name: string;
      stablecoin: string;
      tokenPlus: string;
      blockedStablecoinCount: BigNumber;
      totalStablecoinInvested: BigNumber;
    }
  >;

  allowedAssetsCount(overrides?: CallOverrides): Promise<number>;

  claimReward(
    _assetId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllowedAssets(overrides?: CallOverrides): Promise<string[]>;

  getAssetAddress(
    _name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getAssetTokenPlusAddress(
    _name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTokenPlusBuyPrice(
    _assetId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenPlusSellPrice(
    _assetId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  house(overrides?: CallOverrides): Promise<string>;

  makeBet(
    _amount: PromiseOrValue<BigNumberish>,
    _potentialReward: PromiseOrValue<BigNumberish>,
    _from: PromiseOrValue<string>,
    _assetId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  makeDeposit(
    _assetId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  poolBalanceEnough(
    _amount: PromiseOrValue<BigNumberish>,
    _assetId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  referalBalanceOf(
    _assetId: PromiseOrValue<BigNumberish>,
    _addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferReward(
    _betId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    _houseFee: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    _ref: PromiseOrValue<string>,
    _assetId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unlock(
    _betId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    _houseFee: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    _ref: PromiseOrValue<string>,
    _assetId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userBalanceEnough(
    _player: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _assetId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdraw(
    _assetId: PromiseOrValue<BigNumberish>,
    _tokenPlusAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MIN_USDT_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    addAsset(
      _stablecoinAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    allowedAssets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber] & {
        name: string;
        stablecoin: string;
        tokenPlus: string;
        blockedStablecoinCount: BigNumber;
        totalStablecoinInvested: BigNumber;
      }
    >;

    allowedAssetsCount(overrides?: CallOverrides): Promise<number>;

    claimReward(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllowedAssets(overrides?: CallOverrides): Promise<string[]>;

    getAssetAddress(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAssetTokenPlusAddress(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTokenPlusBuyPrice(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenPlusSellPrice(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    house(overrides?: CallOverrides): Promise<string>;

    makeBet(
      _amount: PromiseOrValue<BigNumberish>,
      _potentialReward: PromiseOrValue<BigNumberish>,
      _from: PromiseOrValue<string>,
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    makeDeposit(
      _assetId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    poolBalanceEnough(
      _amount: PromiseOrValue<BigNumberish>,
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    referalBalanceOf(
      _assetId: PromiseOrValue<BigNumberish>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferReward(
      _betId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _houseFee: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _ref: PromiseOrValue<string>,
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unlock(
      _betId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _houseFee: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _ref: PromiseOrValue<string>,
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    userBalanceEnough(
      _player: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdraw(
      _assetId: PromiseOrValue<BigNumberish>,
      _tokenPlusAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BuyPriceChanged(uint8,uint256,uint256)"(
      assetId?: PromiseOrValue<BigNumberish> | null,
      price?: PromiseOrValue<BigNumberish> | null,
      changedAt?: null
    ): BuyPriceChangedEventFilter;
    BuyPriceChanged(
      assetId?: PromiseOrValue<BigNumberish> | null,
      price?: PromiseOrValue<BigNumberish> | null,
      changedAt?: null
    ): BuyPriceChangedEventFilter;

    "InvestmentAdded(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      investedAt?: null
    ): InvestmentAddedEventFilter;
    InvestmentAdded(
      user?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      investedAt?: null
    ): InvestmentAddedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "ReferalRewardEarned(uint256,address,address,uint256)"(
      betId?: PromiseOrValue<BigNumberish> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): ReferalRewardEarnedEventFilter;
    ReferalRewardEarned(
      betId?: PromiseOrValue<BigNumberish> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): ReferalRewardEarnedEventFilter;

    "SellPriceChanged(uint8,uint256,uint256)"(
      assetId?: PromiseOrValue<BigNumberish> | null,
      price?: PromiseOrValue<BigNumberish> | null,
      changedAt?: null
    ): SellPriceChangedEventFilter;
    SellPriceChanged(
      assetId?: PromiseOrValue<BigNumberish> | null,
      price?: PromiseOrValue<BigNumberish> | null,
      changedAt?: null
    ): SellPriceChangedEventFilter;

    "Withdrawed(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      investedAt?: null
    ): WithdrawedEventFilter;
    Withdrawed(
      user?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      investedAt?: null
    ): WithdrawedEventFilter;
  };

  estimateGas: {
    MIN_USDT_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    addAsset(
      _stablecoinAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowedAssets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowedAssetsCount(overrides?: CallOverrides): Promise<BigNumber>;

    claimReward(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllowedAssets(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetAddress(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAssetTokenPlusAddress(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenPlusBuyPrice(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenPlusSellPrice(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    house(overrides?: CallOverrides): Promise<BigNumber>;

    makeBet(
      _amount: PromiseOrValue<BigNumberish>,
      _potentialReward: PromiseOrValue<BigNumberish>,
      _from: PromiseOrValue<string>,
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    makeDeposit(
      _assetId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    poolBalanceEnough(
      _amount: PromiseOrValue<BigNumberish>,
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referalBalanceOf(
      _assetId: PromiseOrValue<BigNumberish>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferReward(
      _betId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _houseFee: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _ref: PromiseOrValue<string>,
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unlock(
      _betId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _houseFee: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _ref: PromiseOrValue<string>,
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userBalanceEnough(
      _player: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _assetId: PromiseOrValue<BigNumberish>,
      _tokenPlusAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MIN_USDT_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAsset(
      _stablecoinAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowedAssets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowedAssetsCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimReward(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllowedAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAssetAddress(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssetTokenPlusAddress(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenPlusBuyPrice(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenPlusSellPrice(
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    house(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    makeBet(
      _amount: PromiseOrValue<BigNumberish>,
      _potentialReward: PromiseOrValue<BigNumberish>,
      _from: PromiseOrValue<string>,
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    makeDeposit(
      _assetId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolBalanceEnough(
      _amount: PromiseOrValue<BigNumberish>,
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referalBalanceOf(
      _assetId: PromiseOrValue<BigNumberish>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferReward(
      _betId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _houseFee: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _ref: PromiseOrValue<string>,
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unlock(
      _betId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _houseFee: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _ref: PromiseOrValue<string>,
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userBalanceEnough(
      _player: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _assetId: PromiseOrValue<BigNumberish>,
      _tokenPlusAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
